name:                app-lens
version:             0.1.0.0
synopsis: Applicative Bidirectional Programming with Lenses.

description:         
   This module provides a way to applicative bidirectional programming
   with lenses, via an abstract datatype @L@ and lifting and unlifting  
   functions from and to lenses. 
   . 
   > unlinesL :: Lens [String] String
   > unlinesL = unliftT unlinesH 
   > 
   > unlinesH :: [L s String] -> L s String
   > unlinesH []     = new ""
   > unlinesH (x:xs) = lift2 catLineL x (unlinesH xs)
   > 
   > catLineL :: Lens (String, String) String
   > catLineL = {- some appropriate definition -}
   . 
   As you can see, we can use the binary lens @catLineL@ as a binary
   function via a lifting function @lift2@, and construct an involved
   bidirectional transformation @unlinesH@ in the usual "applicative
   programming" style. Then, we can obtain an composed lens as @unlinesL@
   via a unlifting function @unliftT@.



license:             BSD3
license-file:        LICENSE

author:              Kazutaka Matsuda
maintainer:          kztk@ecei.tohoku.ac.jp
category:            Control
build-type:          Simple
cabal-version:       >=1.10

Flag UseVanLaarhoven
  Description: Use lens package as an internal implementation of lens
  Default:     False 

Library
  exposed-modules:
    Control.LensFunction, 
    Control.LensFunction.Exception
  
  other-modules: 
    Control.LensFunction.Core, 
    Control.LensFunction.Util 
    Control.LensFunction.Internal    
  
  if flag(useVanLaarhoven)
    other-modules: Control.LensFunction.InternalL
    cpp-options: -D__USE_VAN_LAARHOVEN__

  other-extensions:    
    RankNTypes, LambdaCase, NoMonomorphismRestriction, 
    FlexibleInstances, FlexibleContexts, UndecidableInstances, 
    IncoherentInstances, CPP, ExistentialQuantification, 
    DeriveDataTypeable, DeriveFunctor, DeriveFoldable, DeriveTraversable
  
  build-depends:  
    base       >=4.7   && < 5, 
    containers >=0.5   && < 1, 
    mtl        >=2.2   && < 3,
    lens       >=4.11  && < 5
  
  GHC-Options: -O2 -rtsopts 

  default-language:    Haskell2010

Benchmark compositions
  type: exitcode-stdio-1.0
  Main-is: Bench/Compositions.hs
  Build-Depends: 
     app-lens, 
     base,
     mtl, 
     containers, 
     lens, 
     deepseq >= 1.3 && < 2, 
     criterion >= 1.1 && < 2


  if flag(useVanLaarhoven)
    cpp-options: -D__USE_VAN_LAARHOVEN__

  GHC-Options: -O2 -rtsopts 
  default-language:    Haskell2010

Benchmark eval
  type: exitcode-stdio-1.0
  Main-is: Bench/Eval.hs
  Build-Depends: 
     app-lens, 
     base,
     mtl, 
     containers, 
     lens,
     deepseq >= 1.3 && < 2, 
     criterion >= 1.1 && < 2

  other-modules: 
     Examples.Evaluator

  if flag(useVanLaarhoven)
    cpp-options: -D__USE_VAN_LAARHOVEN__

  GHC-Options: -O2 -rtsopts 
  default-language:    Haskell2010




